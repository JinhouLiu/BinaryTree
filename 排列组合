 public ArrayList<ArrayList<Integer>> permute (int[] num) {

        ArrayList<ArrayList<Integer>>  list=new ArrayList<>();
        f(num, num.length, 0, list);
        return  list;
    }

    /**
     *
     * @param shu   待选择的数组
     * @param targ  要选择多少个次
     * @param cur   当前选择的是第几次
     */
    private  void f(int[] shu, int targ, int cur,ArrayList<ArrayList<Integer>> list) {

        if(cur == targ) {
            list.add(new ArrayList<>(stack));
            return;
        }


        for(int i=0;i<shu.length;i++) {
            if(!stack.contains(shu[i])) {
                stack.add(shu[i]);
                f(shu, targ, cur + 1,list);
                stack.pop();
            }
        }
    }



  
    /**
     *全排列
     * @param shu   待选择的数组
     * @param targ  要选择多少个次
     * @param cur   当前选择的是第几次
     */
    private static void f(int[] shu, int targ, int cur) {
        if(cur == targ) {
            System.out.println(stack);
            return;
        }

        for(int i=0;i<shu.length;i++) {
            if(!stack.contains(shu[i])) {
                stack.add(shu[i]);

                f(shu, targ, cur + 1);
                stack.pop();
            }
        }
    }




/**
     * 组合问题
     * @param shu  数组
     * @param targ 个数
     * @param has  当前拥有的数量
     * @param cur  起始前部
     */
    public static void f1(int[] shu, int targ, int has,int cur) {
        if(has == targ) {
            System.out.println(stack);
            return;
        }
        for(int i=cur;i<shu.length;i++) {
            if(!stack.contains(shu[i])) {
                stack.add(shu[i]);
                f1(shu, targ, has+ 1,i);
                stack.pop();
            }
        }
    }
