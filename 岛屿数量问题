//深度优先查找数组中包含有多少个1的连接点
/**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 判断岛屿数量
     * @param grid char字符型二维数组
     * @return int整型
     */
    public int solve (char[][] grid) {
        if(grid.length==0){
            return 0;
        }
        int numIslands = 0;
       int  rows=grid.length;
       int  cols=grid[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    numIslands += 1;
                    dfs(grid, i, j);
                }
            }
        }

        return numIslands;
    }

    public void  dfs(char[][] grid,int row,int col){
        int m=grid.length;
        int n=grid[0].length;
        if(row<0||row>=m||col<0||col>=n||grid[row][col]=='0'){
             return;
        }
        grid[row][col]='0';
        dfs(grid,row-1,col);
        dfs(grid,row+1,col);
        dfs(grid,row,col-1);
        dfs(grid,row,col+1);
    }
